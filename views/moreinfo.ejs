<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Details</title>
    <link rel="stylesheet" href="style.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <style>
    .custom-blue {
        background-color: #0a67e1; /* Replace with your desired color code */
        color: #fff; /* Text color (usually white for dark backgrounds) */
    }
.white-text {
    color: white;
}
.small-table {
    width: 80%; /* Adjust the width as needed */
    font-size: 20px; /* Adjust the font size as needed */
}
.custom-table {
    margin-left: 50px;
   
}
.chart-type-container,.checkbox-container{
    list-style: none;
    padding: 0;
}

</style>
</head>
<body>
    <nav class="navbar navbar-expand-lg bg-primary bg-opacity-75  mb-4">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Navbar</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
            <div class="collapse navbar-collapse text-center" id="navbarSupportedContent">
                <ul class="navbar-nav mx-auto mb-2 mb-lg-0">
                    <li class="nav-item ">
                        <a class="nav-link active" aria-current="page" href="home">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="airPollution">Air pollution</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="#">About</a>
                    </li>
                    <li class="nav-item"">
                        <a class="nav-link active " aria-current="page" href="contact">Contact</a>
                    </li>
                    </ul>
                </div>
            </div>
        </nav>
    <button id="pollutionButton" style="display:none">Pollution</button>
    <button id="weatherButton" style="display:none">Weather</button> 
    <div id="weatherDetails" ></div>
    <div id="pollutionDetails" > </div>
    <div id="chartOptions1" class="chartdata1 " >
        <h2 class="ps-5">Air Quality Forecast Data</h2>
        <p class="fst-italic text-muted ps-3">(Graph provides a 3-day/hourly forecast of air quality. It presents air quality data on the 6 major surfaces pollutants - PM 2.5, PM 10, CO, SO2, NO2, and O3. Additionally, this graph displays an air quality index score(AQI). )</p>
        <p class="fst-italic text-danger ps-3">Note:By default it shows the bar graph</p>
        <ul class="chart-type-container d-flex">
            <p class="px-3 ps-5 pt-1 fst-italic">Select type of graph data you want to see? </p>
            <li>
                <label class="px-3">
                    <input type="checkbox" id="showBar1" checked>
                    <span class="fs-5">Show Bar Chart</span>
                </label>
            </li>
            <li>
                <label class="px-3">
                    <input type="checkbox" id="showLine1">
                    <span class="fs-5">Show Line Chart</span>
                </label>
            </li>
        </ul>
        <div class="row">
            <div class="col-10">
                <div class="chart-container ps-5" >
                    <h2 id="chartTitle1"></h2>
                    <canvas id="pollutionChart1" width="300" height="150"></canvas>
                </div>
            </div>
            <div class="col-2 mt-4">
               
                <p class="mt-5">Select type of air pollution data you want to see? </p>
                <p class="text-danger">Note:By default it shows the AQI</p>
                <ul class="checkbox-container" >
                    <li>
                        <label>
                            <input type="checkbox" id="aqi1" checked>
                            <span class="fs-5">Show AQI</span>
                        </label>
                    </li>
                    <li>
                        <label>
                            <input type="checkbox" id="showPM25-1">
                            <span class="fs-5">Show PM2.5</span>
                        </label>
                    </li>
                    <li>
                        <label>
                            <input type="checkbox" id="showO3-1">
                            <span class="fs-5">Show O3</span>
                        </label>
                    </li>
                   <li>
                    <label>
                        <input type="checkbox" id="showco-1">
                        <span class="fs-5">Show CO</span>
                    </label>
                   </li>
                   <li>
                    <label>
                        <input type="checkbox" id="showno2-1">
                        <span class="fs-5">Show NO2</span>
                    </label>
                   </li>
                    <li>
                        <label>
                            <input type="checkbox" id="showpm10-1">
                            <span class="fs-5">Show PM10</span>
                        </label>
                    </li>
                    <li>
                        <label>
                            <input type="checkbox" id="showso2-1">
                            <span class="fs-5">Show SO2</span>
                        </label>
                    </li>  
                
            </div>
            
        </div>
    </div> 
    <div id="date-filter" class="date-filter custom-table mt-3" style="display:none;">
        <h4 class="mb-2 fs-3">History of Air Quality data in graph</h4>
        <label for="startDate"  class="fs-5 fw-semibold">Select Time Period Date from</label>
        <input type="date" id="startDate" class="custom-table">
        <label for="endDate" style="margin: 10px;" class="fs-5 fw-semibold">to</label>
        <input type="date" id="endDate">
        <button type="button" id="applyDateFilter" class="btn btn-secondary custom-table">APPLY</button>
    </div>
    
    <div id="chartOptions" class="chartdata" style="display:none;" >
        <p class="fst-italic text-danger ps-5">Note:By default it shows the bar graph</p>
                <ul class="chart-type-container d-flex">
                    <p class="px-3 ps-5 pt-1">Select type of graph data you want to see? </p>
                    <li>
                        <label class="px-3">
                            <input type="checkbox" id="showBar" checked>
                            <span class="fs-5">Show Bar Chart</span>
                        </label>
                    </li>
                    <li>
                        <label class="px-3">
                            <input type="checkbox" id="showLine">
                            <span class="fs-5">Show Line Chart</span>
                        </label>
                    </li>
                </ul>
        <div class="row">
            <div class="col-10">
                <div class="chart-container ps-5" >
                    <h2 id="chartTitle"></h2>
                    <canvas id="pollutionChart" width="300" height="150"></canvas>
                </div>
            </div>
            <div class="col-2 mt-4">
                
                <p class="mt-5 text-bold">Select type of air pollution data you want to see? </p>
                <p class="text-danger">Note:By default it shows the AQI</p>
                <ul class="checkbox-container" >
                    <li>
                        <label>
                            <input type="checkbox" id="aqi" checked>
                            <span class="fs-5">Show AQI</span>
                        </label>
                    </li>
                    <li>
                        <label>
                            <input type="checkbox" id="showPM25">
                            <span class="fs-5">Show PM2.5</span>
                        </label>
                    </li>
                    <li>
                        <label>
                            <input type="checkbox" id="showO3">
                            <span class="fs-5">Show O3</span>
                        </label>
                    </li>
                   <li>
                    <label>
                        <input type="checkbox" id="showco">
                        <span class="fs-5">Show CO</span>
                    </label>
                   </li>
                   <li>
                    <label>
                        <input type="checkbox" id="showno2">
                        <span class="fs-5">Show NO2</span>
                    </label>
                   </li>
                    <li>
                        <label>
                            <input type="checkbox" id="showpm10">
                            <span class="fs-5">Show PM10</span>
                        </label>
                    </li>
                    <li>
                        <label>
                            <input type="checkbox" id="showso2">
                            <span class="fs-5">Show SO2</span>
                        </label>
                    </li>  
                
            </div>
        </div>
    </div>  
     
    <script>
        
        // Call showPollutionDetails function by default when the page loads
         function showWeatherDetails() {
            document.getElementById("weatherDetails").style.display = "block";
            document.getElementById("pollutionDetails").style.display = "none";
            document.getElementById("date-filter").style.display = "none";
            document.getElementById("chartOptions").style.display = "none";
            document.getElementById("chartOptions1").style.display = "none";
        }

        // Function to show pollution details and hide weather details
        function showPollutionDetails() {
            document.getElementById("weatherDetails").style.display = "none";
            document.getElementById("pollutionDetails").style.display = "block";
            document.getElementById("date-filter").style.display = "block";
            document.getElementById("chartOptions").style.display = "none";
            document.getElementById("chartOptions1").style.display = "block";
        }

        // Event listeners for button clicks
        document.getElementById("weatherButton").addEventListener("click", showWeatherDetails);
        document.getElementById("pollutionButton").addEventListener("click", showPollutionDetails);
        // Function to parse query parameters from URL
        function getQueryParameters() {
            const queryParams = new URLSearchParams(window.location.search);
            const params = {};
            for (const [key, value] of queryParams.entries()) {
                params[key] = value;
            }
            return params;
        }

        // Fetch weather details based on query parameters
        const queryParams = getQueryParameters();
        const city = queryParams.city;
        const state = queryParams.state;
        const apiKey = "9e2859491cdf4bd08226e2e4276e6acc";

        // Check if the city and state are defined
        if (!city || !state) {
            // Display an error message if the parameters are missing
            const weatherDetails = document.getElementById("weatherDetails");
            weatherDetails.innerHTML = `<p>Missing city or state parameters in the URL.</p>`;
        } else {
            // Use the city and state to fetch weather details from the Weatherbit API
           async function fetchWeatherData(cityName, stateName) {
                const weatherApiUrl =  `https://api.weatherbit.io/v2.0/current?city=${encodeURIComponent(city)}&key=${apiKey}`;
                try {
                    const response = await fetch(weatherApiUrl);
                    return await response.json();
                } catch (error) {
                    console.error(`Error fetching weather data for ${cityName}, ${stateName}:`, error);
                    throw error;
                }
            }

            async function fetchAirQualityCurrentData(city, state, country) {
                const apiUrl = `https://api.weatherbit.io/v2.0/current/airquality?city=${encodeURIComponent(city)}&state=${encodeURIComponent(state)}&country=UK&key=${apiKey}`;
            
                try {
                    const response = await fetch(apiUrl);
                    return await response.json();
                } catch (error) {
                    console.error(`Error fetching air quality data for ${city}, ${state}:`, error);
                    throw error;
                }
            }

            async function fetchAirQualityHistoryData(city, state, startDate, endDate) {
               // const apiUrl = `https://api.weatherbit.io/v2.0/current/airquality?city=${encodeURIComponent(city)}&state=${encodeURIComponent(state)}&country=UK&key=${apiKey}`;
             //const apiUrl =`https://api.weatherbit.io/v2.0/history/airquality?city=${encodeURIComponent(city)}&state=${encodeURIComponent(state)}&country=UK&key=${apiKey}`;
               const apiUrl = `https://api.weatherbit.io/v2.0/history/airquality?city=${encodeURIComponent(city)}&state=${encodeURIComponent(state)}&country=UK&start_date=${startDate}&end_date=${endDate}&tz=local&key=${apiKey}`;
             try {
                    const response = await fetch(apiUrl);
                    return await response.json();
                } catch (error) {
                    console.error(`Error fetching air quality data for ${city}, ${state}:`, error);
                    throw error;
                }
            }

            async function fetchAirQualityForecastData(city, state) {
                const apiUrl =`https://api.weatherbit.io/v2.0/forecast/airquality?city=${encodeURIComponent(city)}&state=${encodeURIComponent(state)}&country=UK&key=${apiKey}`;
              try {
                     const response = await fetch(apiUrl);
                     return await response.json();
                 } catch (error) {
                     console.error(`Error fetching air quality data for ${city}, ${state}:`, error);
                     throw error;
                 }
             }

            

            // Fetch weather data and display it
           // Function to handle weather button click
document.getElementById("weatherButton").addEventListener("click", () => {
    // Fetch and display weather information
    fetchWeatherData(city, state)
        .then((weatherData) => {
            const weatherDetails = document.getElementById("weatherDetails");
            if (weatherData.data && weatherData.data.length > 0) {
                const weatherItem = weatherData.data[0];
                weatherDetails.innerHTML = `
                    <div class="card mb-3 h-50 w-50 container mt-4 " style="height: 100px;">
                        <div class="card-body h-100" style="height: 100px;">
                            <h5 class="card-title">${city} (${weatherItem.datetime})</h5>
                            <h6 class="card-subtitle mb-2 text-muted">Temperature: ${weatherItem.temp} &deg; C</h6>
                            <p class="card-text">Wind: ${weatherItem.wind_spd} M/S</p>
                            <p class="card-text">Humidity: ${weatherItem.rh}%</p>
                            <img class="forecast-image" src="https://cdn.weatherbit.io/static/img/icons/${weatherItem.weather.icon}.png" alt="weather" class="card-img-top">
                            <p class="card-text">${weatherItem.weather.description}</p>
                        </div>
                    </div>
                `;
            } else {
                weatherDetails.innerHTML = `<p>No weather data available for ${city}, ${state}</p>`;
            }
        })
        .catch((error) => {
            console.error("Error fetching weather data:", error);
            const weatherDetails = document.getElementById("weatherDetails");
            weatherDetails.innerHTML = `<p>Error fetching weather data: ${error.message}</p>`;
        });
});



fetchAirQualityCurrentData(city, state).then(airQualityData => {
    //console.log(airQualityData);
        const pollutionDetails = document.getElementById("pollutionDetails");
        if (airQualityData.data && airQualityData.data.length > 0) {
            const airQualityItem = airQualityData.data[0];
            pollutionDetails.innerHTML = `
            <div class="card mt-3 mb-3 container bg-primary bg-opacity-75 ">
                <div class="card-body">
                    <h1 class="card-title text-center text-white">${city} , ${state}</h1>
                    <h4 class="card-subtitle mt-4 mb-2 white-text text-center">Air Quality Index : ${airQualityItem.aqi}</h4>
                    <div class="d-flex justify-content-center">
                        <h5 class="card-subtitle mt-2  mb-2 white-text text-center">Latitude : ${airQualityData.lat} &deg; C</h5>
                        <h5 class="card-subtitle px-5 mt-2 mb-2 white-text text-center">Longitude : ${airQualityData.lon} &deg; C:</h5>
                    </div>
                </div>
            </div>
            <h4 class="custom-table mb-4">Current Air Quality in ${city} , ${state}</h6>

                <div class="row">
                    <div class="col-6">
                <table class="table table-bordered small-table custom-table text-center" style="border: 2px solid black;">
                    <thead>
                      <tr>
                        <th scope="col">#</th>
                        <th scope="col">Parameter</th>
                        <th scope="col">Concentration</th>
                      </tr>
                    </thead>
                    <tbody class="table-group-divider">
                        <tr>
                            <th scope="row">1</th>
                            <td>PM25 </td>
                            <td>${airQualityItem.pm25} µg/m³</td
                        </tr>
                        <tr>
                            <th scope="row">2</th>
                            <td>O3</td>
                            <td>${airQualityItem.o3} µg/m³ </td>
                        </tr>
                        <tr>
                            <th scope="row">3</th>
                            <td>CO </td>
                            <td>${airQualityItem.co} µg/m³</td>
                        </tr>
                        <tr>
                            <th scope="row">4</th>
                            <td>NO2 </td>
                            <td>${airQualityItem.no2} µg/m³</td>
                        </tr>
                        <tr>
                            <th scope="row">5</th>
                            <td>SO2 </td>
                            <td>${airQualityItem.so2} µg/m³</td>
                        </tr>
                        <tr >
                            <th scope="row">6</th>
                            <td>PM10 </td>
                            <td>${airQualityItem.pm10} µg/m³</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="col-6">
                <ul>
                    <li class="mb-4 fs-5">O3: Concentration of surface O3 (µg/m³)</li>
                    <li class="mb-4 fs-5">SO2: Concentration of surface SO2 (µg/m³)</li>
                    <li class="mb-4 fs-5">NO2: Concentration of surface NO2 (µg/m³)</li>
                    <li class="mb-4 fs-5">CO: Concentration of carbon monoxide (µg/m³)</li>
                    <li class="mb-4 fs-5">PM25: Concentration of particulate matter < 2.5 microns (µg/m³)</li>
                    <li class=" fs-5">PM10: Concentration of particulate matter < 10 microns (µg/m³)</li>
                </ul>
            </div>
            
            </div>
           

            `;

        } else {
            pollutionDetails.innerHTML = `<p>No air quality data available for ${city}, ${state}</p>`;
        }
    })
    .catch(error => {
        console.error("Error fetching air quality data:", error);
        const pollutionDetails = document.getElementById("pollutionDetails");
        pollutionDetails.innerHTML = `<p>Error fetching air quality data: ${error.message}</p>`;
    });

            // Fetch air quality data and display it
             const ctx = document.getElementById('pollutionChart').getContext('2d');

                let aqi = [];
                let pm25Values = [];
                let o3Values = [];
                let coValues = [];
                let no2Values = [];
                let pm10Values = [];
                let so2Values = [];
                let timestamps = [];
                let chart=null;
                const applyDateFilterButton = document.getElementById('applyDateFilter');
                applyDateFilterButton.addEventListener('click', () => {
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                document.getElementById('chartOptions').style.display = 'block';
                fetchAirQualityHistoryData(city,state, startDate,endDate).then(data => {
                    //console.log(data);
                    
                    timestamps = data.data.map(entry => entry.timestamp_local);
                    aqi= data.data.map(entry => entry.aqi);
                    pm25Values = data.data.map(entry => entry.pm25);
                    o3Values = data.data.map(entry => entry.o3);
                    coValues = data.data.map(entry => entry.co);
                    no2Values = data.data.map(entry => entry.no2);
                    pm10Values = data.data.map(entry => entry.pm10);
                    so2Values = data.data.map(entry => entry.so2);
                    
                    
                    initializeChart('bar',aqi, pm25Values, o3Values,  coValues, no2Values, pm10Values, so2Values, timestamps, city);
                    
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
              
                function initializeChart(chartType,aqi,pm25Data, o3Data,coData, no2Data,pm10data, so2Data,timestamps,city) {
                    //console.log(aqi);
                    
                    if(chart){
                        chart.destroy();
                    }
                    chart = new Chart(ctx, {
                        type: chartType,
                        
                        data: {
                            labels: timestamps,
                            datasets: [
                                {
                                    label: 'AQI',
                                    data: aqi,
                                    backgroundColor: 'Yellow',
                                    borderColor: 'Yellow',
                                    borderWidth: 1,
                                    fill: chartType == 'bar',
                                    hidden: false 
                                },
                                {
                                label: 'PM25Data',
                                data: pm25Data,
                                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                borderColor: 'rgba(75, 192, 192, 1)',
                                borderWidth: 1,
                                fill: chartType == 'bar',
                                hidden: true // Show PM2.5 by default
                            },
                            {
                                label: 'O3 Levels',
                                data: o3Data,
                                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                borderColor: 'rgba(255, 99, 132, 1)',
                                borderWidth: 1,
                                fill: chartType == 'bar',
                                hidden: true // Hide O3 by default
                            },
                            {
                                label: 'co Data',
                                data:coData,
                                backgroundColor: 'red',
                                borderColor: 'red',
                                borderWidth: 1,
                                fill: chartType == 'bar',
                                hidden: true 
                            },
                            {
                                label: 'no2 Data',
                                data:no2Data,
                                backgroundColor: 'brown',
                                borderColor: 'brown',
                                borderWidth: 1,
                                fill: chartType == 'bar',
                                hidden: true 
                            },
                            {
                                label: 'pm10 Data',
                                data:pm10data,
                                backgroundColor: 'purple',
                                borderColor: 'purple',
                                borderWidth: 1,
                                fill: chartType == 'bar',
                                hidden: true // Show PM2.5 by default
                            },
                            {
                                label: 'so2 Data',
                                data:so2Data,
                                backgroundColor: 'Teal',
                                borderColor: 'Teal',
                                borderWidth: 1,
                                fill:chartType == 'bar',
                                hidden: true // Show PM2.5 by default
                            },
                        ]
                        },
                        options: {
                            
                            scales: {
                                x: {
                                    type: 'time',
                                    time: {
                                        unit: 'day',
                                        displayFormats: {
                                            hour: 'MMM D'
                                        }
                                    }
                                },
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: 'Air Quality Levels'
                                    }
                                }
                            },
                            plugins: {
                                legend: {
                                    onClick: (event, legendItem, legend) => {
                                        const datasetIndex = legendItem.datasetIndex;
                                        chart.data.datasets.forEach((dataset, index) => {
                                            if (index === datasetIndex) {
                                                dataset.hidden = false;
                                            } else {
                                                dataset.hidden = true;
                                            }
                                        });
                                        chart.update();
                                    }
                                
                                },
                                title: {
                                    display: true,
                                    text: `${city}`,
                                    color: 'blue',
                                    font: {
                                      size: 20,
                                      weight: 'normal',
                                      style: 'bold'
                                    }
                                }
                            }
                            
                        }
                    });
                
                   
                    
                    const showBarCheckbox = document.getElementById('showBar');
                   const showLineCheckbox = document.getElementById('showLine');
                
                   showBarCheckbox.addEventListener('change', () => {
                       if (showBarCheckbox.checked) {
                            showLineCheckbox.checked = false;
                           chart.destroy();
                           initializeChart('bar', aqi, pm25Data, o3Data, coData, no2Data, pm10data, so2Data, timestamps, city);
                       }
                   });
                
                   showLineCheckbox.addEventListener('change', () => {
                       if (showLineCheckbox.checked) {
                            showBarCheckbox.checked = false;
                           chart.destroy();
                           initializeChart('line', aqi, pm25Data, o3Data, coData, no2Data, pm10data, so2Data, timestamps, city);
                       }
                   });
                    const showPM25Checkbox = document.getElementById('showPM25');
                    const showO3Checkbox = document.getElementById('showO3');
                    const showaqiCheckbox = document.getElementById('aqi');
                    const showcoCheckbox = document.getElementById('showco');
                    const showno2Checkbox = document.getElementById('showno2');
                    const showpm10Checkbox = document.getElementById('showpm10');
                    const showso2Checkbox = document.getElementById('showso2');
                
                    showaqiCheckbox.addEventListener('change', () => {
                        chart.data.datasets[0].hidden = !showaqiCheckbox.checked;
                        chart.update();
                    });
                
                    showPM25Checkbox.addEventListener('change', () => {
                        chart.data.datasets[1].hidden = !showPM25Checkbox.checked;
                        chart.update();
                    });
                
                    showO3Checkbox.addEventListener('change', () => {
                        chart.data.datasets[2].hidden = !showO3Checkbox.checked;
                        chart.update();
                    });
                
                    showcoCheckbox.addEventListener('change', () => {
                        chart.data.datasets[3].hidden = !showcoCheckbox.checked;
                        chart.update();
                    });
                
                    showno2Checkbox.addEventListener('change', () => {
                        chart.data.datasets[4].hidden = !showno2Checkbox.checked;
                        chart.update();
                    });
                
                    showpm10Checkbox.addEventListener('change', () => {
                        chart.data.datasets[5].hidden = !showpm10Checkbox.checked;
                        chart.update();
                    });
                    showso2Checkbox.addEventListener('change', () => {
                        chart.data.datasets[6].hidden = !showso2Checkbox.checked;
                        chart.update();
                    });
                   
                    
                }
  

            }) 
            
            const ctx1 = document.getElementById('pollutionChart1').getContext('2d');

                let aqi1 = [];
                let pm25Values1 = [];
                let o3Values1 = [];
                let coValues1 = [];
                let no2Values1 = [];
                let pm10Values1 = [];
                let so2Values1= [];
                let timestamps1= [];
                let chart1=null;
                
                fetchAirQualityForecastData(city,state).then(data => {
                    console.log(data);
                    
                    timestamps1 = data.data.map(entry => entry.timestamp_local);
                    aqi1= data.data.map(entry => entry.aqi);
                    pm25Values1 = data.data.map(entry => entry.pm25);
                    o3Values1 = data.data.map(entry => entry.o3);
                    coValues1 = data.data.map(entry => entry.co);
                    no2Values1 = data.data.map(entry => entry.no2);
                    pm10Values1 = data.data.map(entry => entry.pm10);
                    so2Values1 = data.data.map(entry => entry.so2);
                    
                    console.log(aqi1)
                    initializeChart1('bar',aqi1, pm25Values1, o3Values1,  coValues1, no2Values1, pm10Values1, so2Values1, timestamps1, city);
                    
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
              
                function initializeChart1(chartType1,aqi1,pm25Data, o3Data,coData, no2Data,pm10data, so2Data,timestamps,city) {
                    console.log(aqi1);
                    
                    if(chart1){
                        chart1.destroy();
                    }
                    chart1 = new Chart(ctx1, {
                        type: chartType1,
                        
                        data: {
                            labels: timestamps,
                            datasets: [
                                {
                                    label: 'AQI',
                                    data: aqi1,
                                    backgroundColor: 'Yellow',
                                    borderColor: 'Yellow',
                                    borderWidth: 1,
                                    fill: chartType1 == 'bar',
                                    hidden: false 
                                },
                                {
                                label: 'PM25Data',
                                data: pm25Data,
                                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                borderColor: 'rgba(75, 192, 192, 1)',
                                borderWidth: 1,
                                fill: chartType1 == 'bar',
                                hidden: true // Show PM2.5 by default
                            },
                            {
                                label: 'O3 Levels',
                                data: o3Data,
                                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                borderColor: 'rgba(255, 99, 132, 1)',
                                borderWidth: 1,
                                fill: chartType1 == 'bar',
                                hidden: true // Hide O3 by default
                            },
                            {
                                label: 'co Data',
                                data:coData,
                                backgroundColor: 'red',
                                borderColor: 'red',
                                borderWidth: 1,
                                fill: chartType1 == 'bar',
                                hidden: true 
                            },
                            {
                                label: 'no2 Data',
                                data:no2Data,
                                backgroundColor: 'brown',
                                borderColor: 'brown',
                                borderWidth: 1,
                                fill: chartType1 == 'bar',
                                hidden: true 
                            },
                            {
                                label: 'pm10 Data',
                                data:pm10data,
                                backgroundColor: 'purple',
                                borderColor: 'purple',
                                borderWidth: 1,
                                fill: chartType1 == 'bar',
                                hidden: true // Show PM2.5 by default
                            },
                            {
                                label: 'so2 Data',
                                data:so2Data,
                                backgroundColor: 'Teal',
                                borderColor: 'Teal',
                                borderWidth: 1,
                                fill:chartType1 == 'bar',
                                hidden: true // Show PM2.5 by default
                            },
                        ]
                        },
                        options: {
                            
                            scales: {
                                x: {
                                    type: 'time',
                                    time: {
                                        unit: 'day',
                                        displayFormats: {
                                            hour: 'MMM D'
                                        }
                                    }
                                },
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: 'Air Quality Levels'
                                    }
                                }
                            },
                            plugins: {
                                legend: {
                                    onClick: (event, legendItem, legend) => {
                                        const datasetIndex = legendItem.datasetIndex;
                                        chart1.data.datasets.forEach((dataset, index) => {
                                            if (index === datasetIndex) {
                                                dataset.hidden = false;
                                            } else {
                                                dataset.hidden = true;
                                            }
                                        });
                                        chart1.update();
                                    }
                                
                                },
                                title: {
                                    display: true,
                                    text: `${city}`,
                                    color: 'blue',
                                    font: {
                                      size: 20,
                                      weight: 'normal',
                                      style: 'bold'
                                    }
                                }
                            }
                            
                        }
                    });
                
                   
                    
                    const showBarCheckbox = document.getElementById('showBar1');
                   const showLineCheckbox = document.getElementById('showLine1');
                
                   showBarCheckbox.addEventListener('change', () => {
                       if (showBarCheckbox.checked) {
                            showLineCheckbox.checked = false;
                           chart1.destroy();
                           initializeChart1('bar', aqi1, pm25Data, o3Data, coData, no2Data, pm10data, so2Data, timestamps, city);
                       }
                   });
                
                   showLineCheckbox.addEventListener('change', () => {
                       if (showLineCheckbox.checked) {
                            showBarCheckbox.checked = false;
                           chart1.destroy();
                           initializeChart1('line', aqi1, pm25Data, o3Data, coData, no2Data, pm10data, so2Data, timestamps, city);
                       }
                   });
                    const showPM25Checkbox = document.getElementById('showPM25-1');
                    const showO3Checkbox = document.getElementById('showO3-1');
                    const showaqiCheckbox = document.getElementById('aqi1');
                    const showcoCheckbox = document.getElementById('showco-1');
                    const showno2Checkbox = document.getElementById('showno2-1');
                    const showpm10Checkbox = document.getElementById('showpm10-1');
                    const showso2Checkbox = document.getElementById('showso2-1');
                
                    showaqiCheckbox.addEventListener('change', () => {
                        chart1.data.datasets[0].hidden = !showaqiCheckbox.checked;
                        console.log(chart1.data)
                        chart1.update();
                    });
                
                    showPM25Checkbox.addEventListener('change', () => {
                        chart1.data.datasets[1].hidden = !showPM25Checkbox.checked;
                        chart1.update();
                    });
                
                    showO3Checkbox.addEventListener('change', () => {
                        chart1.data.datasets[2].hidden = !showO3Checkbox.checked;
                        chart1.update();
                    });
                
                    showcoCheckbox.addEventListener('change', () => {
                        chart1.data.datasets[3].hidden = !showcoCheckbox.checked;
                        chart1.update();
                    });
                
                    showno2Checkbox.addEventListener('change', () => {
                        chart1.data.datasets[4].hidden = !showno2Checkbox.checked;
                        chart1.update();
                    });
                
                    showpm10Checkbox.addEventListener('change', () => {
                        chart1.data.datasets[5].hidden = !showpm10Checkbox.checked;
                        chart1.update();
                    });
                    showso2Checkbox.addEventListener('change', () => {
                        chart1.data.datasets[6].hidden = !showso2Checkbox.checked;
                        chart1.update();
                    });
                   
                    
                }
  

              
                     
 }
 window.addEventListener('load', () => {
    showPollutionDetails();
});        
    </script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>
</body>
</html>
